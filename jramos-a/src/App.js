import React, { useEffect, useState } from 'react';
import './App.css';

function App() {
  const [connectedTime, setConnectedTime] = useState(0);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [userFT, setUserFT] = useState(0);
  const [tokenPrice, setTokenPrice] = useState(1);
  const [equity, setEquity] = useState(0);
  const [username, setUsername] = useState('');

  useEffect(() => {
    fetch('http://localhost:3001/get-token-price')
      .then((response) => response.json())
      .then((data) => {
        setTokenPrice(data.price);
      })
      .catch((err) => console.error('Error fetching token price:', err));
  }, []);

  useEffect(() => {
    const storedUsername = localStorage.getItem('username');
    const storedIsLoggedIn = JSON.parse(localStorage.getItem('isLoggedIn'));
    const storedConnectedTime = parseInt(localStorage.getItem('connectedTime'), 10);
    const storedUserFT = parseFloat(localStorage.getItem('userFT'));

    if (storedIsLoggedIn) {
      setIsLoggedIn(storedIsLoggedIn);
      setUsername(storedUsername);
      setConnectedTime(storedConnectedTime || 0);
      setUserFT(storedUserFT || 0);
    }
  }, []);

  useEffect(() => {
    let interval;

    if (isLoggedIn) {
      interval = setInterval(() => {
        setConnectedTime((prev) => prev + 1);
        if (connectedTime % 60 === 0) {
          setUserFT((prev) => prev + 1);
        }
      }, 1000);
    } else {
      clearInterval(interval);
    }

    return () => clearInterval(interval);
  }, [isLoggedIn, connectedTime]);

  useEffect(() => {
    setEquity(userFT * tokenPrice);
  }, [userFT, tokenPrice]);

  const handleCreateUser = () => {
    const autoGeneratedUsername = `user${Date.now()}`;

    setIsLoggedIn(true);
    setUsername(autoGeneratedUsername);
    setConnectedTime(0);
    setUserFT(0);

    localStorage.setItem('isLoggedIn', JSON.stringify(true));
    localStorage.setItem('username', autoGeneratedUsername);
    localStorage.setItem('connectedTime', '0');
    localStorage.setItem('userFT', '0');
  };

  useEffect(() => {
    if (isLoggedIn) {
      localStorage.setItem('isLoggedIn', JSON.stringify(true));
      localStorage.setItem('username', username);
      localStorage.setItem('connectedTime', connectedTime.toString());
      localStorage.setItem('userFT', userFT.toString());
    } else {
      localStorage.removeItem('isLoggedIn');
      localStorage.removeItem('username');
      localStorage.removeItem('connectedTime');
      localStorage.removeItem('userFT');
    }
  }, [isLoggedIn, username, connectedTime, userFT]);

  return (
    <div className="app">
      <header className="header">
        <h1>42 Rewards Platform</h1>
        {!isLoggedIn && (
          <button className="login-button" onClick={handleCreateUser}>
            Create User and Start Earning Tokens
          </button>
        )}

        {isLoggedIn && <p>Welcome, {username}! You are earning FT tokens.</p>}
      </header>

      <main className="main">
        <section className="rewards-section staking-section">
          <div className="info-box">
            <p>Connected Time: <span>{connectedTime}</span> seconds</p>
          </div>
          <div className="info-box">
            <p>Accumulated FT Tokens: <span>{userFT.toFixed(1)}</span></p>
          </div>
          <div className="info-box">
            <p>Account Equity: <span>${equity.toFixed(2)}</span></p>
          </div>
        </section>
      </main>

      <footer className="footer">
        <p>Made by jramos-a</p>
      </footer>
    </div>
  );
}

export default App;
